#!/usr/bin/env python3

from gevent import monkey; monkey.patch_all()

# standard library
import sys
import signal
from functools import partial

# 3rd party
import gevent
from flask import Flask
from loguru import logger
from werkzeug.contrib.fixers import ProxyFix

# betanin
from betanin import api
from betanin import client
from betanin.config import Config
from betanin.api.jobs import serve_web
from betanin.api.jobs import import_torrents
from betanin.api.jobs import retry_old_imports
from betanin.api.jobs import register_notifications
from betanin.extensions import db
from betanin.extensions import cors
from betanin.extensions import rest
from betanin.extensions import migrate
from betanin.extensions import socketio
from betanin.api.orm.models.line import Line
from betanin.api.orm.models.torrent import Torrent


__import__('sqlalchemy_utils').force_instant_defaults()
__import__('sqlalchemy_utils').force_auto_coercion()


def create_app():
    app = Flask(__name__.split('.')[0])
    app.url_map.strict_slashes = False
    app.config.from_object(Config)
    register_modifications(app)
    register_extensions(app)
    register_blueprints(app)
    return app


def register_extensions(app):
    db.init_app(app)
    cors.init_app(app)
    migrate.init_app(app, db)
    socketio.init_app(app)


def register_blueprints(app):
    # blueprint extensions (before register)
    rest.init_app(api.blueprint)
    _origins = app.config.get('CORS_ORIGIN_WHITELIST', '*')
    cors.init_app(api.blueprint, origins=_origins)
    cors.init_app(client.blueprint, origins=_origins)
    # blueprints
    app.register_blueprint(client.blueprint)
    app.register_blueprint(api.blueprint)


def register_modifications(app):
	app.wsgi_app = ProxyFix(app.wsgi_app)


def _make_starter(module, flask_app, *args, **kwargs):
    logger.info(f'starting job {module.__name__}')
    return module.start(flask_app, *args, **kwargs)


def _stop(sig_num, frame):
    logger.info('shutting down')
    sys.exit(0)


if __name__ == "__main__":
    # setup stop
    signal.signal(signal.SIGINT, _stop)
    signal.signal(signal.SIGTERM, _stop)
    # setup start
    start = partial(_make_starter,
        flask_app=create_app())
    # start sync jobs
    start(retry_old_imports)
    # start async jobs
    gevent.joinall((
        start(register_notifications),
        start(import_torrents),
        start(serve_web),
    ))
