#!/usr/bin/bash

# safety checks
if [[ $# -ne 1 ]]; then
    echo "usage: $0 <major|minor|patch>" >&2
    exit 1
fi
if [[ -n "$(git status --porcelain)" ]]; then
    echo "working directory is dirty" >&2
    exit 1
fi

# get the current verison from last git tag into array and
# inc the provided part
semver_expression='s/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1 \2 \3/'
version=( $(git describe --tags | sed -E -e "$semver_expression" ) )
case "$1" in
    major)
        ((version[0]++))
	version[1]=0
	version[2]=0
        ;;
    minor)
        ((version[1]++))
	version[2]=0
        ;;
    patch)
        ((version[2]++))
        ;;
    *)
        echo 'please provide a valid version in increment' >&2
        exit 1
esac
new_version="v${version[0]}.${version[1]}.${version[2]}"

# write a `version.py` to the python package. it will be used
# for get the version at runtime (for the rest endpoint for
# example)
cat > betanin/version.py  << EOL
# generated by \`tag-and-deploy\` script in project root
# $(date)

__version__ = "$new_version"
EOL

# create and tag single commit with a change to the version file
git commit --all --message "bump to $new_version"
git tag "$new_version"

# we don't want to build the frontend if it hasn't changed since
# the last time - so read the old from disk, and calculate the new.
# if the old != new, then build
last_client_sum_path='.last_client_sum'
current_client_sum=$(
    find betanin_client/ -type f -not -path '*node_modules*' -print0 \
        | sort -z \
        | xargs -0 sha1sum \
        | sha1sum
)
last_client_sum=$( < "$last_client_sum_path" )
if [[ "$last_client_sum" != "$current_client_sum" ]]; then
    npm --prefix betanin_client/ run-script build
fi
echo "$current_client_sum" > "$last_client_sum_path"

# run setuptools and upload. we're passing the bumped version
# (just for pypi) in my enviroment variable
NEW_VERSION=$new_version python3 setup.py sdist bdist_wheel
python3 -m twine upload --disable-progress-bar dist/*
